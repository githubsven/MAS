__includes ["pso.nls"]

breed [onlookers onlooker]
breed [scouts scout]
breed [employees employee]
breed [foodsources foodsource]

employees-own 
[ 
  nectar_amount 
  best_found_patch_personal fitness ;Save the best found patch 
  foodsource_x
  foodsource_y
  foodsource_found
]

foodsources-own
[
 resources 
]

globals
[
  ;no_bees ;Number of bees in the ABC
  limit ;Limit of onlooker bees
  no_onlookers
  no_employees
  no_scouts
  food_sources
]

to init
  ;set no_bees 10
  set no_onlookers no_bees / 2 ;50% of the swarm according to D. Karaboga's implementation https://abc.erciyes.edu.tr/pub/tr06_2005.pdf
  set no_employees no_bees / 2 ;Idem
  set no_scouts 1 ;Idem
  
  create-onlookers no_onlookers[ set color yellow ]
  create-scouts no_scouts [ set color blue ]
  create-employees no_employees[
    set foodsource_found false
    set color red
    set size 1.5
    set xcor 0
    set ycor 0
  ]
  
  create-foodsources no_employees [set resources random 10]; Create a food source for every employed bee
  ask foodsources [ set shape "x" set color red setxy random-pxcor random-pycor]
  
  let i (no_onlookers + no_scouts)
  let j (no_onlookers + no_scouts + no_employees)
  repeat no_employees [
    ask employee i [
      set foodsource_x [ pxcor ] of foodsource j
      set foodsource_y [ pycor ] of foodsource j
    ]
    set i i + 1
    set j j + 1
  ]
end

to abc
  go
  checkFitnessImprovement
  tick
end

to gotoFoodsource
  let i (no_onlookers + no_scouts)
  let j (no_onlookers + no_scouts + no_employees)
  repeat no_employees [
    ask employee i [
      set xcor [ pxcor ] of foodsource j
      set ycor [ pycor ] of foodsource j
    ]
    set i i + 1
    set j j + 1
  ]
end

to checkFitnessImprovement
ask max-one-of employees [best_found_patch_personal]
  [
    if best_found_patch_global < best_found_patch_personal
    [
      set best_found_patch_global best_found_patch_personal
    ]
  ]
  if best_found_patch_global = [score] of optimum
    [ stop ]
end

to recruitOnlookers
  let totalFitness 0
  ask employees [ set totalFitness totalFitness + fitness ]
  
  let employee-list [self] of employees
  let onlooker-list [self] of onlookers
  
  let cumFitness 0
  foreach employee-list [
    [a] -> set cumFitness cumFitness + [ fitness ] of a
    foreach onlooker-list [
      [b] -> show b
      let r random totalFitness
      show r
      if r <= cumFitness [
        ask b [ set breed employees 
        set foodsource_x [ foodsource_x ] of a
        set foodsource_y [ foodsource_y ] of a
        set foodsource_found false
        set color red
        set size 1.5
        ]
      ]
    ]
  ] 
end

to go
  ask employees [ 
    ; face in the direction of my velocity
    ifelse foodsource_found = false [ 
      setxy foodsource_x foodsource_y
      set fitness [ score ] of patch foodsource_x foodsource_y
    ]
    [ 
      setxy 0 0
      recruitOnlookers
      set foodsource_found false
    ]
    ;move-to patch foodsource_x foodsource_y 
    if round(xcor) = foodsource_x and round(ycor) = foodsource_y [
      set foodsource_found true
    ]
  ]
  tick
end
