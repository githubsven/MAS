__includes ["pso.nls"]

breed [onlookers onlooker]
breed [scouts scout]
breed [employees employee]
breed [foodsources foodsource]

employees-own 
[ 
  nectar_amount 
  best_found_patch_personal fitness ;Save the best found patch 
  foodsource_x
  foodsource_y
  foodsource_found
]

foodsources-own
[
 resources 
]

globals
[
  ;no_bees ;Number of bees in the ABC
  limit ;Limit of onlooker bees
  no_onlookers
  no_employees
  no_scouts
  food_sources
]

to init
  ;set no_bees 10
  set no_onlookers no_bees / 2 ;50% of the swarm according to D. Karaboga's implementation https://abc.erciyes.edu.tr/pub/tr06_2005.pdf
  set no_employees no_bees / 2 ;Idem
  if no_bees > 0 [
    set no_scouts 1 ;Idem
  ]
  
  create-onlookers no_onlookers[ set color yellow ]
  create-scouts no_scouts [ set color blue ]
  create-employees no_employees[
    set foodsource_found false
    set color red
    set size 1.5
    set xcor 0
    set ycor 0
  ]
  
  create-foodsources no_employees [set resources random 10]; Create a food source for every employed bee
  ask foodsources [ 
    set shape "x" 
    set color red 
    setxy random-pxcor random-pycor 
    set resources [round(score * 50)] of patch xcor ycor 
  ]
  
  let i (no_onlookers + no_scouts)
  let j (no_onlookers + no_scouts + no_employees)
  repeat no_employees [
    ask employee i [
      set foodsource_x [ pxcor ] of foodsource j
      set foodsource_y [ pycor ] of foodsource j
    ]
    set i i + 1
    set j j + 1
  ]
end

to abc
  go
  checkFitnessImprovement
  tick
end

to checkFitnessImprovement
ask max-one-of employees [best_found_patch_personal]
  [
    if best_found_patch_global < best_found_patch_personal
    [
      set best_found_patch_global best_found_patch_personal
    ]
  ]
  if best_found_patch_global = [score] of optimum
    [ stop ]
end

to recruitOnlookers
  let totalFitness 0
  ask employees [ set totalFitness totalFitness + fitness ]
  
  let employee-list [self] of employees
  let onlooker-list [self] of onlookers
  
  let cumFitness 0
  foreach onlooker-list [
    [a] -> set cumFitness 0
    let r random-float totalFitness
    foreach employee-list [
      [b] -> set cumFitness cumFitness + [ fitness ] of b
      if r <= cumFitness and [breed] of a = onlookers[
        ask a [ 
          set breed employees 
          let uphill_x 0
          let uphill_y 0
          hatch 1 [ ;create invisible turtle that can do uphill to find the new foodsource location
            setxy [foodsource_x ] of b [ foodsource_y ] of b;start at old foodsource
            repeat localsearch_steps [ uphill pcolor ] ;do uphill to find a better foodsource in the neighborhood
            set uphill_x xcor
            set uphill_y ycor
            ;print (word "x: " uphillx " y: " uphilly)
            hatch 1 [ ;create foodsource on the better spot
              set breed foodsources
              set shape "x" 
              set color yellow 
              setxy uphill_x uphill_y  
              set resources [round(score * 50)] of patch xcor ycor 
            ]
            die ;kill the invisible turtle
          ]
          set foodsource_x uphill_x
          set foodsource_y uphill_y
          set foodsource_found false
          set color yellow
          set size 1.5
        ]
      ]
    ]
  ] 
end

to go
  ask employees [ 
    ; face in the direction of my velocity
    ifelse foodsource_found = false [ 
      setxy foodsource_x foodsource_y
      ;repeat localsearch_steps [localsearch]
      set fitness [ score ] of patch foodsource_x foodsource_y
    ]
    [ 
      setxy 0 0
      recruitOnlookers
      set foodsource_found false
    ]
    
    ;move-to patch foodsource_x foodsource_y 
    if round(xcor) != 0 or round(ycor) != 0 [ ;takes advantage of teleporting bees
      set foodsource_found true
      ask foodsources-on patch xcor ycor [ 
        set resources resources - 1
        let depleted_x xcor
        let depleted_y ycor
        if resources = 0 [ ;the foodsource is depleted
          ask employees with [foodsource_x = depleted_x and foodsource_y = depleted_y ] [ ;make empoloyees that go to that foodsource scouts
            set breed scouts
            set color blue
          ] 
          die ;remove the depleted foodsource
        ]
      ]
    ]
  ]
  
  ask scouts [
    let px_cor random-pxcor
    let py_cor random-pycor
    setxy px_cor py_cor ; goto a random position
    set breed employees ; use this random position as a new possible foodsource and become an empoloyee
    set color red 
    set size 1.5
    set foodsource_found true
    set foodsource_x px_cor
    set foodsource_y py_cor
    hatch 1 [ ;create a foodsource on the random position
      set breed foodsources
      set shape "x" 
      set size 1
      set color red 
      setxy px_cor py_cor  
      set resources [round(score * 50) - 1] of patch xcor ycor 
    ]
  ]
end
