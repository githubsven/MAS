globals 
[
  ;;constants
  pso_c0_list
  pso_c1_list
  pso_c2_list
  
  abc_ls_steps_list
  
  ;;variables best
  pt_pso_best
  pt_abc_best
  
  pt_round_nr
  pt_set_score
]

to tune
  clear-all
  reset-ticks
  
  set_constants
  set_variables
  tune_pso
  tune_abc
end

to set_constants
  ;; list of all parameter values evaluated
  set pso_c0_list (list 0.5 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1)
  set pso_c1_list (list 2.0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 2.8 3 3.2 3.4 3.6 3.8 4 4.2 4.4 4.6 4.8 5)
  set pso_c2_list (list 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 2.8 3 3.2 3.4 3.6 3.8 4 4.2 4.4 4.6 4.8 5)
  
  set abc_ls_steps_list (list 1 2 3 4 5 6 7 8 9 10)
  set abc_ls_steps_list (list 10 9 8 7 6 5 4 3 2 1)
  
end

to set_variables
  ;; pt_pso_best :: (c0, c1, c2, score)
  set pt_pso_best (list 0 0 0 100000000000)
  ;; pt_abc_best :: (ls_steps, score)
  set pt_abc_best (list 0 100000000000)
  
end

to tune_abc
	foreach abc_ls_steps_list [ts_ls_step ->
		set pt_round_nr 1
		set pt_set_score 0
		while [pt_round_nr < 250] [
			setup_abc_round ts_ls_step
			do_abc_round
			set pt_round_nr pt_round_nr + 1
		]
		
		if (item 1 pt_abc_best >= pt_set_score) [
			set pt_abc_best (list ts_ls_step pt_set_score)
			print (word "ABC: New best score: " pt_abc_best)
		]
		set abc_ls_steps_list (list (item 0 pt_abc_best))
    ]
end
		

to tune_pso
  foreach pso_c0_list [ts_c0 -> 
    foreach pso_c1_list [ts_c1 ->
      foreach pso_c2_list [ts_c2 ->
        set pt_round_nr 1
        set pt_set_score 0
        while [pt_round_nr < 250] [
          setup_pso_round ts_c0 ts_c1 ts_c2
          do_pso_round
          set pt_round_nr pt_round_nr + 1
        ]
        
        if (item 3 pt_pso_best >= pt_set_score) [
          set pt_pso_best (list ts_c0 ts_c1 ts_c2 pt_set_score)
          print (word "PSO: New best score: " pt_pso_best)
        ]
      ]
      set pso_c2_list (list (item 2 pt_pso_best))
    ]
    set pso_c1_list (list (item 1 pt_pso_best))
  ]
  set c0 item 0 pt_pso_best
end


to setup_abc_round [#abc_ls_steps]

	clear-turtles
	
	create_problem_space
	
	set no_fitness_improvement_counter 0
	set no_bees 40
	set no_onlookers no_bees / 2
	set no_employees no_bees / 2
	if no_bees > 0 [
		set no_scouts 1
		]
	create-onlookers no_onlookers[ set color yellow ]
	create-scouts no_scouts [ set color blue ]
	create-employees no_employees[
    set foodsource_found false
    set color red
    set size 1.5
    set xcor 0
    set ycor 0
    set best_found_patch_personal 0	
	]
	
	set localsearch_steps #abc_ls_steps
	
	  create-foodsources no_employees [set resources random 10]; Create a food source for every employed bee
	ask foodsources [ 
		set shape "x" 
		set color red 
		setxy random-pxcor random-pycor 
		set resources [round(score * 50)] of patch xcor ycor 
	  ]
  
  let i (no_onlookers + no_scouts)
  let j (no_onlookers + no_scouts + no_employees)
  repeat no_employees [
    ask employee i [
      set foodsource_x [ pxcor ] of foodsource j
      set foodsource_y [ pycor ] of foodsource j
    ]
    set i i + 1
    set j j + 1
  ]
end

to setup_pso_round [#pso_c0 #pso_c1 #pso_c2]
  
  clear-turtles
  
  create_problem_space
  
  create-particles 25[
    set color 15
    setxy random-pxcor random-pycor
    set total_best (list 0 0 0)
    set current (list 0 0 0)
    set own_best (list 0 0 0)
    set velocity (list 0 0)
  ]
  
  set c0 #pso_c0
  set c1 #pso_c1
  set c2 #pso_c2
  
  
end

to do_abc_round
	let nr_steps 0
  let abc_best_found 0
	loop [
		if nr_steps > 20 [stop]
    let optimum_found false
		set no_fitness_improvement_counter no_fitness_improvement_counter + 1
		if count employees > 0 [
		ask max-one-of employees [best_found_patch_personal]
		[
        set abc_best_found best_found_patch_personal
		]
	  ]

	  if abc_best_found = 1 [
        set pt_set_score pt_set_score + nr_steps
        set optimum_found true
    ]
    if optimum_found [stop]
	  abc
	  tick
	  set nr_steps nr_steps + 1
	  
	  ]
	  
     
	  if (nr_steps > 20)[
		set pt_set_score pt_set_score + nr_steps
	  ]
end


to do_pso_round
  let nr_steps 0
  loop [
    if nr_steps > 20 [stop]
    let optimum_found false
    ask particle 1 [
      if (item 2 total_best = 1) [
        set pt_set_score pt_set_score + nr_steps
        set optimum_found true
      ]
    ]
    if optimum_found [stop]
    psa
    tick
    set nr_steps nr_steps + 1
  ]
  if (nr_steps > 20) [
    set pt_set_score pt_set_score + nr_steps
  ]
end